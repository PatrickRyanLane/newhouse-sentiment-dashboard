name: Backfill Brand SERPs

on:
  workflow_dispatch:
    inputs:
      start:
        description: "Start date (YYYY-MM-DD)"
        default: "2025-09-15"
        required: true
      end:
        description: "End date (YYYY-MM-DD, defaults to today)"
        required: false

jobs:
  backfill:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # needed for rebase operations

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          else
            # minimal deps for brand script
            python -m pip install pandas requests vaderSentiment
          fi

      - name: Backfill brand SERPs
        shell: bash
        env:
          START: ${{ github.event.inputs.start }}
          ENDIN: ${{ github.event.inputs.end }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, sys, subprocess
          import datetime as dt

          start = os.environ.get("START")
          end   = os.environ.get("ENDIN") or dt.date.today().isoformat()
      
          d = dt.date.fromisoformat(start)
          end_d = dt.date.fromisoformat(end)

          while d <= end_d:
            s = d.isoformat()
            print(f"Processing {s}…")
            rc = subprocess.call([sys.executable, "scripts/process_serps_brands.py", "--date", s])
            if rc != 0:
              # Treat as a SKIP so the workflow keeps going when S3 is missing
              print(f"[skip] {s} (no raw SERP on S3 or non-fatal error)")
            d += dt.timedelta(days=1)
          PY


      - name: Commit outputs
        shell: bash
        env:
          START_IN: ${{ github.event.inputs.start }}
          END_IN:   ${{ github.event.inputs.end }}
        run: |
          set -euo pipefail

          # Git identity + trust this checkout
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

          # Rebase-safe pull even with local changes created by the backfill step
          git fetch origin main
          git checkout main
          git pull --rebase --autostash origin main

          # Stage & commit
          git add -A
          if git diff --cached --quiet; then
            echo "No data changes to commit."
            exit 0
          fi

          START_DATE="${START_IN:-manual}"
          DATE_LABEL="${END_IN:-$(date -u +%F)}"
          git commit -m "brand SERPs: backfill ${START_DATE}..${DATE_LABEL}"

          # Push; if remote moved in the meantime, rebase once and retry
          if ! git push origin HEAD:main; then
            echo "Push rejected; rebasing once…"
            git pull --rebase --autostash origin main
            git push origin HEAD:main
          fi
