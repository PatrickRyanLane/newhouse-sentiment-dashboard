name: Daily Brands Pipeline

on:
  # Manual run with optional date, e.g. 2025-09-22
  workflow_dispatch:
    inputs:
      date:
        description: "Run date in UTC (YYYY-MM-DD). Leave blank for today."
        required: false
        type: string
  # Scheduled run — adjust as you like
  schedule:
    - cron: "10 9 * * *"   # 09:10 UTC daily

# allow the workflow to push commits back to the repo
permissions:
  contents: write

# prevent two data-writing jobs from colliding
concurrency:
  group: data-writes
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # needed so we can pull/rebase before pushing

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build brand articles
        env:
          RUN_DATE: ${{ github.event.inputs.date || '' }}
        run: |
          set -euo pipefail
          DATE_TO_RUN="${RUN_DATE:-$(date -u +%F)}"
          echo "Running news_articles_brands.py for ${DATE_TO_RUN}"
          python scripts/news_articles_brands.py --date "${DATE_TO_RUN}"

      - name: Aggregate brand news sentiment
        run: |
          set -euo pipefail
          python scripts/news_sentiment_brands.py

      - name: Process brand SERPs (with fallback, idempotency, force option)
        shell: bash
        env:
          # Optional manual input; leave blank to default to today (UTC)
          DATE_IN: ${{ github.event.inputs.date || '' }}
          # Set to 1 if you want to reprocess even if outputs already exist
          FORCE_REPROCESS: ${{ github.event.inputs.force_reprocess || 0 }}
        run: |
          set -euo pipefail
      
          # Prefer input date; else today (UTC)
          DATE="${DATE_IN:-$(date -u +%F)}"
          ROW="data/serp_rows/${DATE}-brand-serps-rows.csv"
      
          echo "Requested DATE: ${DATE}"
          if [ ! -f "$ROW" ]; then
            echo "No rows for ${DATE} at ${ROW} — trying yesterday (UTC)…"
            YDAY="$(date -u -d "${DATE} -1 day" +%F)"
            ROW="data/serp_rows/${YDAY}-brand-serps-rows.csv"
            if [ -f "$ROW" ]; then
              DATE="$YDAY"
              echo "Using yesterday: ${DATE}"
            else
              echo "Still not found. Trying latest available rows file…"
              latest=$(ls -1 data/serp_rows/*-brand-serps-rows.csv 2>/dev/null | sort | tail -n 1 || true)
              if [ -n "${latest}" ]; then
                DATE="$(basename "${latest}" | sed 's/-brand-serps-rows\.csv//')"
                ROW="$latest"
                echo "Using latest available date: ${DATE}"
              else
                echo "No brand SERP rows exist yet; skipping without error."
                exit 0
              fi
            fi
          fi
      
          # Idempotency guard: skip if already processed unless FORCE_REPROCESS=1
          PROCESSED="data/processed_serps/${DATE}-brand-serps-processed.csv"
          if [ -f "$PROCESSED" ] && [ "$FORCE_REPROCESS" != "1" ]; then
            echo "Already processed for ${DATE} (${PROCESSED} exists). Skipping."
            exit 0
          fi
      
          echo "Processing brand SERPs for ${DATE}"
          python scripts/process_serps_brands.py --date "${DATE}"

      # --- Safe commit & push: rebase onto latest main, retry once if needed ---
      - name: Commit outputs
        shell: bash
        env:
          RUN_DATE: ${{ github.event.inputs.date || '' }}
        run: |
          set -euo pipefail

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

          # Rebase onto latest main even with local changes from earlier steps
          git fetch origin main
          git checkout main
          git pull --rebase --autostash origin main

          # Stage & commit any generated/updated files
          git add -A
          if git diff --cached --quiet; then
            echo "No data changes to commit."
            exit 0
          fi

          DATE_TO_USE="${RUN_DATE:-$(date -u +%F)}"
          git commit -m "brand pipeline: update data (${DATE_TO_USE})"

          # Push; if remote moved meanwhile, rebase once and retry
          if ! git push origin HEAD:main; then
            echo "Push rejected; rebasing once…"
            git pull --rebase --autostash origin main
            git push origin HEAD:main
          fi
